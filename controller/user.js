import User from "../models/user.js";
import bcrypt from "bcryptjs";
import Jwt from "jsonwebtoken";
import Buyer from "../models/buyer.js"

export const register = async (req, res) => {
  try {
    const { name, email, password, role } = req.body;

    // Validate role
    const validRoles = ['buyer', 'seller', 'admin'];
    if (role && !validRoles.includes(role)) {
      return res.status(400).json({ message: `Invalid role. Allowed roles are: ${validRoles.join(', ')}` });
    }

    // Check if user already exists
    const existingUser = await User.findOne({ where: { email } });
    if (existingUser) {
      return res.status(400).json({ message: "User already exists" });
    }

    // Hash the password before saving it
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);

    // Create the user
    const newUser = await User.create({
      name,
      email,
      password: hashedPassword,
      role: 'buyer', // Default to 'buyer' if no role is provided
    });

      // Create a corresponding Buyer record, linking it to the newUser via userId
      const newBuyer = await Buyer.create({
        userId: newUser.id, // This automatically sets the userId to the newly created User's id
      });

      const buyerId = newBuyer.id; // The buyerId is now generated by Sequelize as it's the primary key of the Buyers table
    

    // Generate JWT token for the user
    const token = Jwt.sign({ id: newUser.id }, process.env.JWT_SECRET, {
      expiresIn: "15d", // Make sure to configure this based on your use case
    });

    // Respond with the user details (don't send password back)
    res.status(201).json({
      message: "User created successfully",
      user: {
        id: newUser.id,
        name: newUser.name,
        email: newUser.email,
        role: newUser.role,
        buyerId,  // Include buyerId if the user is a buyer
      },
      token,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "Server error" });
  }
};



export const login = async (req, res) => {
  const { email, password } = req.body;

  try {
    // Trim the email and password to avoid spaces causing issues
    const trimmedEmail = email.trim();
    const trimmedPassword = password.trim();

    console.log(`Attempting to login with email: ${trimmedEmail}`);
    console.log(`Attempting to login with password: ${trimmedPassword}`);

    // Find user by email
    const user = await User.findOne({ where: { email: trimmedEmail } });

    // If user not found
    if (!user) {
      console.log(`User not found with email: ${trimmedEmail}`);
      return res.status(400).json({ error: "Invalid email or password" });
    }

    console.log(`User found: ${user.email}`);

    // Use the comparePassword method defined in the User model
    const isPasswordValid = await user.comparePassword(trimmedPassword);
    console.log(`Password match result: ${isPasswordValid}`);

    // If password is invalid
    if (!isPasswordValid) {
      console.log(`Invalid password for user: ${trimmedEmail}`);
      return res.status(400).json({ error: "Invalid email or password" });
    }

    // Generate JWT token
    const token = Jwt.sign({ id: user.id }, process.env.JWT_SECRET, {
      expiresIn: "15d", // Ensure JWT expiration is set as needed
    });

    // Respond with user details and token
    res.status(200).json({
      message: "Login successful",
      user: {
        id: user.id,
        name: user.name,
        email: user.email,
        role: user.role,
      },
      token,
    });
  } catch (error) {
    console.error("Error during login:", error);
    res.status(500).json({ error: error.message });
  }
};
